import logging
import requests
from datetime import datetime, timezone, timedelta
from sending import send_report_to_slack
from insertBQ import insert_to_bigquery
from getInfo import get_property_name_info,get_contract_type_info,get_reservation_info
import json

def get_api_token():
    url = 'https://api.m2msystems.cloud/login'
    mail = "development+20211103@matsuri-tech.com"
    password = "rYGOOh9PgUxFhjhd"

    payload = {
        "email": mail,
        "password": password
    }

    try:
        response = requests.post(url, json=payload)
        if response.status_code == 200:
            json_data = response.json()
            token = json_data.get('accessToken')
            return token
        else:
            return None
    except requests.exceptions.RequestException as e:
        return None





def process_data(data):
    # タイムスタンプをUTCとして解釈し、日本時間に変換
    utc_time = datetime.fromtimestamp(data['createdAt'], tz=timezone.utc)
    jst_time = utc_time.astimezone(timezone(timedelta(hours=9)))
    created_at = jst_time.strftime('%Y-%m-%d %H:%M:%S')

    # 質問IDを論理的なキーにマッピング（複数のquestionIdに対応）
    question_mapping = {
        "listing_id": [
            "01JG110RW2RH31AKY8ETA88D90",
            "01JBC6M9XJ614AK3BFPKP9P7RV"
            
        ],
        "common_area_id": [
            "01JG35MVJRE2F53ZAWMWC6FEX7",
            "01JBC6VKZFPMYHM33JJXNCZ8VN"
        ],
        "input_user_id": [
            "01JG35ND3GKWFP1H0QDVQ22PVT",
            "01JBC6VJQA1A05HRH9QZ4JTVFP"
        ],
        "input_by": [
            "01JG35NQ9CAMY15A5P3C1KENW3",
            "01JBC6VF9GDD1VBA8YK67YDWCD"
        ],
        "trouble_id": [
            "01JG35P6BYWJ5AS38YDCVZ0EP8",
            "01JBC6VCCC67543EB8TPXKXBKV"
        ],
        "trouble_number": [
            "01JG35PMA1QTHRVPKRBFBZ5TD2",
            "01JFS1VCAESPRAV7AD5WN6S93H"
        ],
        "rq_person": [
            "01JGB5ZEWZYDYMNFHQKVANB5HT",
            "01JJ3K01296MXBG7C9N6FGY0DF"
        ],
        "incident": [
            "01JG35QB3ESV54MKHDPZWB4SCE",
            "01JFS11BC23311BM6DP77TNJBB"
        ],
        "request": [
            "01JGB5WMXQBSG8653KZBNWKH0Z",
            "01JFS0WM68R4NR6K8010Q5KTDB"
        ],
        "handover_id": [
            "01JGB607TBJ0KGDA60WK8CHP3F",
            "01JJ3JMBH20VQ400KZ0NPW4BVE"
            # 追加のquestionIdがあればここに
        ],
        "handover_to": [
            "01JH26A84P6C6X7KXKA606HHY7",
            "01JFS2EB4HCGRYH48KD8GP2Q18"
            # 追加のquestionIdがあればここに
        ]
    }

    # trouble_numberに基づく内容のマッピング
    trouble_contents_mapping = {
        "A": "管理会社・業者からの問い合わせ",
        "B": "近隣住人からの問い合わせ",
        "C": "予約日の変動",
        "D": "予約人数の変動",
        "E": "予約部屋の変動",
        "F": "新規予約の承認",
        "G": "アーリーチェックイン",
        "H": "レイトチェックアウト",
        "I": "未チェックアウト",
        "J": "室内の清掃不備・未清掃",
        "K": "オリコン・清掃道具",
        "L": "リネン・タオル・アメニティ・消耗品",
        "M": "カトラリー・家具・家電",
        "N": "エアコン",
        "O": "トイレ",
        "P": "壁・窓・床・設備",
        "Q": "Wi-Fi",
        "R": "忘れ物",
        "S": "ゴミ庫・ゴミストッカー",
        "T": "TTlock・SmartKB・SmartLock",
        "U": "その他の鍵",
        "V": "設営・立ち上げ作業",
        "W": "自火報",
        "X": "その他",

        "AA": "テスト用",
    }

    # フォーマットされたデータの初期化
    formatted_data = {
        "Submission ID": data.get('submissionId', ''),
        "created_at": created_at
    }

    # question_mappingを逆転させ、questionIdからキーを取得できるようにする
    reverse_mapping = {}
    for key, q_ids in question_mapping.items():
        for q_id in q_ids:
            reverse_mapping[q_id] = key

    # valuesを処理
    for value_entry in data.get('values', []):
        question_id = value_entry.get('questionId')
        value = value_entry.get('value', "")
        if question_id in reverse_mapping:
            key = reverse_mapping[question_id]
            # 既にキーが存在し、値がリストの場合は追加
            if key in formatted_data:
                if isinstance(formatted_data[key], list):
                    if isinstance(value, list):
                        formatted_data[key].extend(value)
                    else:
                        formatted_data[key].append(value)
                else:
                    # 既存の値がリストでない場合、新たにリストにする
                    formatted_data[key] = [formatted_data[key]]
                    if isinstance(value, list):
                        formatted_data[key].extend(value)
                    else:
                        formatted_data[key].append(value)
            else:
                # 値がリストの場合は結合、そうでなければそのまま
                formatted_data[key] = ", ".join(value) if isinstance(value, list) else value

    # 値が存在しない場合に空文字列を補完
    for key in question_mapping.keys():
        if key not in formatted_data:
            formatted_data[key] = ""

    # trouble_numberに基づいてtrouble_contentsを設定
    trouble_number = formatted_data.get("trouble_number", "")
    trouble_contents = trouble_contents_mapping.get(trouble_number, "不明なトラブル")
    formatted_data["trouble_contents"] = trouble_contents

    return formatted_data


from sre_constants import error
import logging
import requests
import json
from datetime import datetime

def making_tour(formatted_data):
    try:
        logging.info("makingTour 実行開始")

        if not formatted_data.get('common_area_id') and not formatted_data.get('listing_id'):
            logging.error("commonAreaId または listingId が空です。処理を中止します。")
            raise ValueError("commonAreaIdまたはlistingIdは必須です")

        # トークン取得
        token = get_api_token()
        if not token:
            logging.error("トークンを取得できませんでした。")
            raise ValueError("トークン取得失敗")

        logging.info(f"取得したトークン: {token}")

        # placementの判定
        placement = ""
        if formatted_data['common_area_id']:
            placement = "commonArea"
        elif formatted_data['listing_id']:
            placement = "listing"

        # note作成
        note = "\n".join([
            f"【トラブル分類】\n{formatted_data.get('trouble_contents', '')}",
            f"【誰から】\n{formatted_data.get('rq_person', '')}",
            f"【何が起きた】\n{formatted_data.get('incident', '')}",
            f"【何をしてほしい】\n{formatted_data.get('request', '')}",
        ])



        cleaner_name = "未設定"
        cleaner = []

        if formatted_data.get('handover_id'):
            # handover_id が存在する場合の処理
            if formatted_data.get('handover_to') == "TASK":
                cleaner_name = "TASK"
                cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
            elif formatted_data.get('handover_to') == "CX":
                cleaner_name = "CX"
                cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
            elif formatted_data.get('handover_to') == "設備機器":
                cleaner_name = "設備機器"
                cleaner = ["b57eac85-8829-4a71-a0a7-4f6ebd8ade08"]
            elif formatted_data.get('handover_to') == "小笠原":  #テスト用
                cleaner_name = "小笠原"
                cleaner = ["91af72ff-d537-4cec-9cc4-2a7d9f20b954"]
            else:
                cleaner_name = "TASK" #handover_idが空の場合はTASKに戻ってくる仕様だがよいか
                cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
        else:
          # cleanerの値をtroubleによって分岐
          trouble = formatted_data.get('trouble_contents', '')
          print(f"trouble: {trouble}")
          if trouble == "管理会社・業者からの問い合わせ":
              cleaner_name = "TASK"
              cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
          elif trouble == "近隣住人からの問い合わせ":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "予約日の変動":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "予約人数の変動":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "予約部屋の変動":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "新規予約の承認":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "アーリーチェックイン":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "レイトチェックアウト":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "未チェックアウト":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "室内の清掃不備・未清掃":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "オリコン・清掃道具":
              cleaner_name = "TASK"
              cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
          elif trouble == "リネン・タオル・アメニティ・消耗品":
              cleaner_name = "TASK"
              cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
          elif trouble == "カトラリー・家具・家電":
              cleaner_name = "TASK"
              cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
          elif trouble == "エアコン":
              cleaner_name = "TASK"
              cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
          elif trouble == "トイレ":
              cleaner_name = "TASK"
              cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
          elif trouble == "壁・窓・床・設備":
              cleaner_name = "TASK"
              cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
          elif trouble == "Wi-Fi":
              cleaner_name = "TASK"
              cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
          elif trouble == "忘れ物":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "ゴミ庫・ゴミストッカー":
              cleaner_name = "TASK"
              cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
          elif trouble == "TTlock・SmartKB・SmartLock":
              cleaner_name = "設備機器"
              cleaner = ["b57eac85-8829-4a71-a0a7-4f6ebd8ade08"]
          elif trouble == "その他の鍵":
              cleaner_name = "TASK"
              cleaner = ["f9afe0ee-424e-4eb8-b294-ae9ff20d4257"]
          elif trouble == "設営・立ち上げ作業":
              cleaner_name = "startup"
              cleaner = ["030e6802-0211-4bba-9910-f778a3a123bb"]
          elif trouble == "自火報":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "その他":
              cleaner_name = "CX"
              cleaner = ["27127fa6-a3ef-41dd-838c-87cb0ebf044f"]
          elif trouble == "テスト用":
              cleaner_name = "小笠原"
              cleaner = ["91af72ff-d537-4cec-9cc4-2a7d9f20b954"]
          else:
              cleaner_name = "未設定"
              cleaner = []  # デフォルト値
        
        

        handover_id = formatted_data.get('handover_id', '')

        if handover_id:
            note = "\n【このツアーは引き継ぎタスクです。 前回のフォームID】\n" + handover_id +"\n"+ note


        # APIリクエスト用ペイロード
        payload = {
            "placement": placement,
            "commonAreaId": formatted_data['common_area_id'],
            "listingId": formatted_data['listing_id'],
            "cleaningDate": formatted_data['created_at'].split(' ')[0],
            "note": note,
            "cleaners": cleaner,
            "Submission ID": formatted_data['Submission ID'],
            "photoTourId": "564605a8-b689-4715-8023-8ff943998c31",
            "handoverId": handover_id
        }



        print(f"送信ペイロード: {payload}")


        api_url = 'https://api-cleaning.m2msystems.cloud/v3/cleanings/create_with_placement'

        # APIリクエスト設定
        headers = {
            'Authorization': f'Bearer {token}',
            'Content-Type': 'application/json'
        }

        # APIリクエスト送信
        response = requests.post(api_url, headers=headers, json=payload)

        # レスポンスデバッグ出力
        logging.info(f"APIレスポンス: {response.status_code}, {response.text}")

        if response.status_code == 200:
            return {
                "success": "ok",
                "cleaner_name": cleaner_name,
                "response_data": response.json()
            }
        else:
            return {
                "success": "error",
                "cleaner_name": cleaner_name,
                "response_data": response.json()
            }

    except Exception as e:
        logging.error(f"エラーが発生しました: {str(e)}")
        return {
            "success": "error",
            "cleaner_name": [],
            "response_data": {"error": str(e)}
        }



import logging
import requests
from datetime import datetime
from sending import send_report_to_slack
from insertBQ import insert_to_bigquery
from getInfo import get_property_name_info, get_contract_type_info, get_reservation_info

def main(request):

    logging.basicConfig(level=logging.INFO)  # ログレベルの設定

    logging.info("処理開始")  # ログ出力


    try:
        # リクエストデータを辞書型で処理
        if isinstance(request, dict):
            request_data = request
        else:
            request_data = request.get_json()  # Flaskなどのリクエストオブジェクトを扱う場合

        if not request_data:
            return {"error": "Invalid request data"}, 400

        # データの処理
        formatted_data = process_data(request_data)
        response = making_tour(formatted_data)

        if response.get("success") == "error":
            logging.error(f"APIリクエストが失敗しました: {response['response_data']['error']}")
            # Slack通知やBigQueryへの処理を続行する
            # 失敗した情報もBigQueryに記録
            insert_to_bigquery(formatted_data)
            return {"message": "APIリクエスト失敗", "data": formatted_data}, 500

        # announce_data を初期化
        announce_data = formatted_data.copy() if isinstance(formatted_data, dict) else {}

        # 追加情報の取得
        property_name = get_property_name_info(formatted_data)
        contract_type = get_contract_type_info(formatted_data)
        reservation_info = get_reservation_info(formatted_data)
        
        # デバッグ用の出力
        print(type(response.get("response_data", None)))  # 変数の型を確認
        print(f"formatted_data の型: {type(formatted_data)}")

        # response の値を announce_data に追加
        announce_data["success"] = response.get("success", [])
        announce_data["assign"] = response.get("cleaner_name", [])
        announce_data["response"] = response.get("response_data", [])

        # 修正箇所: announce_data に property_name を追加
        announce_data["property_name"] = property_name

        announce_data["contract_type"] = contract_type
        announce_data["route"] = reservation_info.get("ota_type")
        announce_data["stay_start"] = reservation_info.get("start_date")
        announce_data["stay_end"] = reservation_info.get("end_date")

        # デバッグログ
        print(f"announce_data: {announce_data}")

        # 予約情報の型と値を確認
        response_data = response.get("response_data", None)
        print(f"response_data の値: {response_data}, 型: {type(response_data)}")

        # response_data の型を確認して処理を分岐
        if isinstance(response_data, dict):
            announce_data["admin_url"] = "https://manager-cleaning.m2msystems.cloud/operations/" + response_data.get("some_key", "")
            announce_data["cleaner_url"] = "https://cleaner-cleaning.m2msystems.cloud/operations/" + response_data.get("some_key", "")
        elif isinstance(response_data, str):
            announce_data["admin_url"] = f"https://manager-cleaning.m2msystems.cloud/operations/{response_data}"
            announce_data["cleaner_url"] = f"https://cleaner-cleaning.m2msystems.cloud/operations/{response_data}"
        else:
            announce_data["admin_url"] = "https://manager-cleaning.m2msystems.cloud/operations/"
            announce_data["cleaner_url"] = "https://cleaner-cleaning.m2msystems.cloud/operations/"

        print(f"announce_data: {announce_data}")

        # 追加情報を announce_data に統合
        announce_data["contract_type"] = contract_type
        announce_data["route"] = reservation_info.get("ota_type")
        announce_data["stay_start"] = reservation_info.get("start_date")
        announce_data["stay_end"] = reservation_info.get("end_date")

        print(f"formatted_data: {formatted_data} (type: {type(formatted_data)})")
        print(f"response_data: {response.get('response_data', None)} (type: {type(response.get('response_data', None))})")
        print(f"announce_data: {announce_data} (type: {type(announce_data)})")
        print(f"response_data: {response_data} (type: {type(response_data)})")

        # 送信内容のリストを作成
        formatted_sent_contents = [announce_data]

        # Slack に送信
        slack_response = send_report_to_slack(formatted_sent_contents)
        print(slack_response)

        if isinstance(slack_response, list) and slack_response:
            announce_data["slack_success"] = slack_response[0].get("success", "error")
        else:
            announce_data["slack_success"] = "error"

        # arcieve_data に変換
        arcieve_data = {
            "submission_id": announce_data.get("Submission ID"),
            "created_at": announce_data.get("created_at"),
            "listing_id": announce_data.get("listing_id"),
            "common_area_id": announce_data.get("common_area_id"),
            "input_user_id": announce_data.get("input_user_id"),
            "input_by": announce_data.get("input_by"),
            "trouble_id": announce_data.get("trouble_id"),
            "trouble_number": announce_data.get("trouble_number"),
            "rq_person": announce_data.get("rq_person"),
            "incident": announce_data.get("incident"),
            "request": announce_data.get("request"),
            "handover_id": announce_data.get("handover_id"),
            "handover_to" : announce_data.get("handover_to"),
            "trouble_contents": announce_data.get("trouble_contents"),
            "success": announce_data.get("success"),
            "assign": announce_data.get("assign"),
            "response": announce_data.get("response"),
            "admin_url": announce_data.get("admin_url"),
            "cleaner_url": announce_data.get("cleaner_url"),
            "slack_success": announce_data.get("slack_success"),
            'property_name': announce_data.get('property_name'),
            'contract_type': announce_data.get('contract_type'),
            'route': announce_data.get('route'),
            'stay_start': announce_data.get('stay_start'),
            'stay_end': announce_data.get('stay_end'),
        }

        print(f"arcieve_data: {arcieve_data}")

        # BQにアーカイブを挿入
        BQ = insert_to_bigquery(arcieve_data)

        print("BQ結果：", BQ)

        if response.get("success") == "error":
            logging.error(f"APIリクエスト失敗: {response.get('response_data')}")
            return {"message": "making_tour APIリクエストが失敗しました。", "data": formatted_data}, 500
        else:
            return {"message": "making_tour APIリクエストが成功しました。", "data": formatted_data}, 200

    except Exception as e:
        logging.error(f"リクエスト処理中にエラーが発生しました: {str(e)}")
        return {"error": str(e)}, 500

